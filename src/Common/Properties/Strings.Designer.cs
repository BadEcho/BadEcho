//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BadEcho.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("BadEcho.Properties.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not load manifest resource from the Bad Echo Core Framework&apos;s assembly..
        /// </summary>
        public static string ActivationContextManifestResourceNotFound {
            get {
                return ResourceManager.GetString("ActivationContextManifestResourceNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A handle to the module containing an embedded manifest resource could not be loaded. If this is a single-file packaged, the resource name for the manifest file must be provided instead..
        /// </summary>
        public static string ActivationContextModuleNotFound {
            get {
                return ResourceManager.GetString("ActivationContextModuleNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot retrieve a value from an export that isn&apos;t representing an object..
        /// </summary>
        public static string ArgumentExportValueNoObject {
            get {
                return ResourceManager.GetString("ArgumentExportValueNoObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided string cannot be empty..
        /// </summary>
        public static string ArgumentStringEmpty {
            get {
                return ResourceManager.GetString("ArgumentStringEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid INotifyPropertyChanged implementation; event data is missing property name information..
        /// </summary>
        public static string BadINotifyPropertyChangedImplementation {
            get {
                return ResourceManager.GetString("BadINotifyPropertyChangedImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EnumDisplayMonitors failed unexpectedly..
        /// </summary>
        public static string DisplayEnumDisplayMonitorsFailed {
            get {
                return ResourceManager.GetString("DisplayEnumDisplayMonitorsFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HRESULT of {0} returned when attempting to query for a monitor&apos;s DPI. Because of this, display device will default to using the system-wide DPI..
        /// </summary>
        public static string DisplayGetDpiForMonitorFailed {
            get {
                return ResourceManager.GetString("DisplayGetDpiForMonitorFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HRESULT of {0} returned when attempting to query for a monitor&apos;s scale factor. Because of this, display device will default to using a default scale factor of 100 percent..
        /// </summary>
        public static string DisplayGetScaleFactorForMonitorFailed {
            get {
                return ResourceManager.GetString("DisplayGetScaleFactorForMonitorFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enumeration has already finished; no more objects exist in the sequence..
        /// </summary>
        public static string EnumerationAtEnd {
            get {
                return ResourceManager.GetString("EnumerationAtEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enumeration has not started. A call to MoveNext() must occur at least once prior to reading the Current object..
        /// </summary>
        public static string EnumerationNotStarted {
            get {
                return ResourceManager.GetString("EnumerationNotStarted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The enumeration type&apos;s underlying integral numeric type is not an integer..
        /// </summary>
        public static string EnumIntegralTypeNotInteger {
            get {
                return ResourceManager.GetString("EnumIntegralTypeNotInteger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The executor is already running on a thread..
        /// </summary>
        public static string ExecutorAlreadyRunning {
            get {
                return ResourceManager.GetString("ExecutorAlreadyRunning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An executor can only be disabled on the thread which the executor was created on..
        /// </summary>
        public static string ExecutorCannotDisableOnOtherThread {
            get {
                return ResourceManager.GetString("ExecutorCannotDisableOnOtherThread", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An executor can only be re-enabled on the thread which the executor was created on..
        /// </summary>
        public static string ExecutorCannotEnableOnOtherThread {
            get {
                return ResourceManager.GetString("ExecutorCannotEnableOnOtherThread", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message queue still pumping for executor that is in a disabled state..
        /// </summary>
        public static string ExecutorDisabledByQueuePumping {
            get {
                return ResourceManager.GetString("ExecutorDisabledByQueuePumping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Executor operation must either be complete or canceled prior to finalizing completion..
        /// </summary>
        public static string ExecutorFinalizedBeforeDone {
            get {
                return ResourceManager.GetString("ExecutorFinalizedBeforeDone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The executor needs to be running before frames can be pushed to it..
        /// </summary>
        public static string ExecutorFramesRequireRun {
            get {
                return ResourceManager.GetString("ExecutorFramesRequireRun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Executor is disposed and cannot be ran again..
        /// </summary>
        public static string ExecutorIsDisposed {
            get {
                return ResourceManager.GetString("ExecutorIsDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The executor&apos;s ability to process operations is currently disabled..
        /// </summary>
        public static string ExecutorProcessingDisabled {
            get {
                return ResourceManager.GetString("ExecutorProcessingDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The executor has been shutdown and cannot execute any further operations..
        /// </summary>
        public static string ExecutorShutdown {
            get {
                return ResourceManager.GetString("ExecutorShutdown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Executor may not wait on an operation executing on the same thread..
        /// </summary>
        public static string ExecutorWaitOperationSameThread {
            get {
                return ResourceManager.GetString("ExecutorWaitOperationSameThread", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A plugin directory was explicitly specified in this application&apos;s configuration, however &apos;{0}&apos; does not exist. Please ensure that a desired plugin directory exists when configuring its use, or simply forego specifying an explicit plugin directory name if its existence cannot be guaranteed..
        /// </summary>
        public static string ExtensibilityConfigurationDirectoryNotFound {
            get {
                return ResourceManager.GetString("ExtensibilityConfigurationDirectoryNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot check if assembly &apos;{0}&apos; is an extensibility point because it is missing the following dependency: &apos;{1}&apos;.
        /// </summary>
        public static string ExtensibilityPointMissingDependency {
            get {
                return ResourceManager.GetString("ExtensibilityPointMissingDependency", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a registered filterable family identity value. Registration of a filterable family requires a FilterableFamily export action..
        /// </summary>
        public static string FamilyIdNotRegistered {
            get {
                return ResourceManager.GetString("FamilyIdNotRegistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid filterable family identity value. Values must be parseable as standard globally unique identifiers..
        /// </summary>
        public static string FamilyIdNotValid {
            get {
                return ResourceManager.GetString("FamilyIdNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A glyph for the character &apos;{0}&apos; could not be found, most likely because it was not part of the character set used to generate the font&apos;s atlas..
        /// </summary>
        public static string GlyphNotInFont {
            get {
                return ResourceManager.GetString("GlyphNotInFont", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changing a SafeHandle&apos;s underlying handle value during marshalling is not supported..
        /// </summary>
        public static string HandleCannotChangeDuringMarshalling {
            get {
                return ResourceManager.GetString("HandleCannotChangeDuringMarshalling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No routable plugin has been registered to handle calls made to &apos;{0}&apos;..
        /// </summary>
        public static string HostAdapterUnregisteredMethod {
            get {
                return ResourceManager.GetString("HostAdapterUnregisteredMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempting to create a pointer pointed at the best-fitting image resulted in a pointer overflow due to the icon file itself containing too much data..
        /// </summary>
        public static string IconFileTooLarge {
            get {
                return ResourceManager.GetString("IconFileTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The best-fitting image&apos;s specified amount of data exceeds the total length of the icon file..
        /// </summary>
        public static string IconImageExceedsFile {
            get {
                return ResourceManager.GetString("IconImageExceedsFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Calculating the ending offset for the best-fitting image described by the icon file resulted in an overflow..
        /// </summary>
        public static string IconImageOffsetOverflow {
            get {
                return ResourceManager.GetString("IconImageOffsetOverflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The best-fitting image described by the icon file is too large for realignment and loading..
        /// </summary>
        public static string IconImageTooLarge {
            get {
                return ResourceManager.GetString("IconImageTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The icon file has no image entries..
        /// </summary>
        public static string IconNoEntries {
            get {
                return ResourceManager.GetString("IconNoEntries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size of the icon file isn&apos;t large enough to describe the number of images it says it contains..
        /// </summary>
        public static string IconTooSmallForEntries {
            get {
                return ResourceManager.GetString("IconTooSmallForEntries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Injection of exported parts into an attributed pluggable part of type &apos;{0}&apos; within a self-armed context requires said part to be assignable to the specified dependency value of type &apos;{1}&apos;..
        /// </summary>
        public static string IncompatibleDependencyTypeForInjection {
            get {
                return ResourceManager.GetString("IncompatibleDependencyTypeForInjection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided JSON object&apos;s data property is not a JSON object..
        /// </summary>
        public static string JsonDataValueNotObject {
            get {
                return ResourceManager.GetString("JsonDataValueNotObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided JSON object&apos;s extremum property is not a number..
        /// </summary>
        public static string JsonExtremumValueNotNumber {
            get {
                return ResourceManager.GetString("JsonExtremumValueNotNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; property found on the provided JSON object is not the expected type descriptor property &apos;{1}&apos;..
        /// </summary>
        public static string JsonInvalidTypeName {
            get {
                return ResourceManager.GetString("JsonInvalidTypeName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided JSON text is malformed. A collection of one or more key-value pairs is expected for an object..
        /// </summary>
        public static string JsonMalformedText {
            get {
                return ResourceManager.GetString("JsonMalformedText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected &apos;null&apos; literal token encountered in JSON when an object was expected..
        /// </summary>
        public static string JsonNodeIsNull {
            get {
                return ResourceManager.GetString("JsonNodeIsNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided JSON text is not a JSON number..
        /// </summary>
        public static string JsonNotNumber {
            get {
                return ResourceManager.GetString("JsonNotNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided JSON text does not begin with the start of a JSON array..
        /// </summary>
        public static string JsonNotStartArray {
            get {
                return ResourceManager.GetString("JsonNotStartArray", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided JSON text does not begin with the start of a JSON object..
        /// </summary>
        public static string JsonNotStartObject {
            get {
                return ResourceManager.GetString("JsonNotStartObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided JSON object&apos;s type descriptor property is not a number..
        /// </summary>
        public static string JsonTypeValueNotNumber {
            get {
                return ResourceManager.GetString("JsonTypeValueNotNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing exception payload..
        /// </summary>
        public static string LoggingMissingException {
            get {
                return ResourceManager.GetString("LoggingMissingException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing message payload..
        /// </summary>
        public static string LoggingMissingMessage {
            get {
                return ResourceManager.GetString("LoggingMissingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to create global hook message queue..
        /// </summary>
        public static string MessageQueueForHookFailed {
            get {
                return ResourceManager.GetString("MessageQueueForHookFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple exports for contract type &apos;{0}&apos; belong to the &apos;{1}&apos; filterable family; any part beyond the first of its type from a filterable context is ignored..
        /// </summary>
        public static string MultipleExportsFoundForFamily {
            get {
                return ResourceManager.GetString("MultipleExportsFoundForFamily", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple exports for the locally exported contract type &apos;{0}&apos; were found. Only a single provider should ever be available for contract types meant to be loaded from a local context..
        /// </summary>
        public static string MultipleExportsFoundForLocalContract {
            get {
                return ResourceManager.GetString("MultipleExportsFoundForLocalContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extensibility configuration lacks registration for contract &apos;{0}&apos;..
        /// </summary>
        public static string NoContractInConfiguration {
            get {
                return ResourceManager.GetString("NoContractInConfiguration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Registry was not armed with an expected dependency..
        /// </summary>
        public static string NoDependencyArmed {
            get {
                return ResourceManager.GetString("NoDependencyArmed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No comparable exception class can be mapped to the provided HRESULT as it does not represent a failed operation..
        /// </summary>
        public static string NoExceptionFromSuccessfulResult {
            get {
                return ResourceManager.GetString("NoExceptionFromSuccessfulResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No export for contract type &apos;{0}&apos; belongs to the &apos;{1}&apos; filterable family..
        /// </summary>
        public static string NoExportFoundForFamily {
            get {
                return ResourceManager.GetString("NoExportFoundForFamily", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No local export for the contract type &apos;{0}&apos; was found. If this is an expected contract, then it should be exported within the consuming component&apos;s own assembly. If expectancy is tenuous, check for support via the appropriate methods provided by the plugin host system first..
        /// </summary>
        public static string NoExportFoundForLocalContract {
            get {
                return ResourceManager.GetString("NoExportFoundForLocalContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to send a message adding or modifying an icon to the taskbar&apos;s notification area..
        /// </summary>
        public static string NotifyIconAddModifyFailed {
            get {
                return ResourceManager.GetString("NotifyIconAddModifyFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to send a message requesting a balloon notification to the taskbar&apos;s notification area..
        /// </summary>
        public static string NotifyIconBalloonFailed {
            get {
                return ResourceManager.GetString("NotifyIconBalloonFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot send a balloon notification until the icon has been added to the taskbar&apos;s notification area..
        /// </summary>
        public static string NotifyIconBalloonRequiresTaskbar {
            get {
                return ResourceManager.GetString("NotifyIconBalloonRequiresTaskbar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to send a message deleting an icon from the taskbar&apos;s notification area..
        /// </summary>
        public static string NotifyIconDeleteFailed {
            get {
                return ResourceManager.GetString("NotifyIconDeleteFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot send a balloon notification using a custom icon without a custom balloon icon being loaded first..
        /// </summary>
        public static string NotifyIconNoCustomBalloonIconLoaded {
            get {
                return ResourceManager.GetString("NotifyIconNoCustomBalloonIconLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file &apos;{0}&apos; being scanned for pluggable exports failed to load due to most likely not being a valid .NET assembly..
        /// </summary>
        public static string PluginBadImageException {
            get {
                return ResourceManager.GetString("PluginBadImageException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file &apos;{0}&apos; being scanned for pluggable exports failed to load..
        /// </summary>
        public static string PluginFileLoadException {
            get {
                return ResourceManager.GetString("PluginFileLoadException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to set popup as the foreground window. The menu will not disappear if the user clicks outside of it..
        /// </summary>
        public static string PopupNotInForeground {
            get {
                return ResourceManager.GetString("PopupNotInForeground", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The executing process is unmanaged, therefore no contract implementation are able to be exported by it..
        /// </summary>
        public static string ProcessCannotExportContracts {
            get {
                return ResourceManager.GetString("ProcessCannotExportContracts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid call-routable plugin identity value. Values must be parseable as standard globally unique identifiers..
        /// </summary>
        public static string RoutablePluginIdNotValid {
            get {
                return ResourceManager.GetString("RoutablePluginIdNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RoutableProxy was not provided a IHostAdapter due to improper initialization. Use a static factory method such as RoutableProxy.Create instead to initialize the proxy properly..
        /// </summary>
        public static string RoutableProxyNotInitializedCorrectly {
            get {
                return ResourceManager.GetString("RoutableProxyNotInitializedCorrectly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RouteProxy instance was somehow invoked with null method information..
        /// </summary>
        public static string RoutableProxyNullMethodInfo {
            get {
                return ResourceManager.GetString("RoutableProxyNullMethodInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Subclass message processing procedure invoked while in a detached state..
        /// </summary>
        public static string SubclassDetachedWndProc {
            get {
                return ResourceManager.GetString("SubclassDetachedWndProc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to detach a subclassed window&apos;s WndProc from the window&apos;s message chain..
        /// </summary>
        public static string SubclassDetachmentFailed {
            get {
                return ResourceManager.GetString("SubclassDetachmentFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to forcibly detach a subclassed window&apos;s WndProc from the window&apos;s message chain..
        /// </summary>
        public static string SubclassForcibleDetachmentFailed {
            get {
                return ResourceManager.GetString("SubclassForcibleDetachmentFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot load an operation into an already initialized ThreadExecutorOperationTaskSource..
        /// </summary>
        public static string ThreadExecutorSourceAlreadyInitialized {
            get {
                return ResourceManager.GetString("ThreadExecutorSourceAlreadyInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ThreadExecutorOperationTaskSource has not been initialized..
        /// </summary>
        public static string ThreadExecutorSourceNotInitialized {
            get {
                return ResourceManager.GetString("ThreadExecutorSourceNotInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to unregister message queue hook for thread with ID &apos;{0}&apos;..
        /// </summary>
        public static string UnhookMessageQueueFailed {
            get {
                return ResourceManager.GetString("UnhookMessageQueueFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to unregister window hook for thread with ID &apos;{0}&apos;..
        /// </summary>
        public static string UnhookWindowFailed {
            get {
                return ResourceManager.GetString("UnhookWindowFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Weak list enumerator requires a strong reference to enumerate..
        /// </summary>
        public static string WeakListEnumeratorNoReference {
            get {
                return ResourceManager.GetString("WeakListEnumeratorNoReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A hot key has already been registered with the identifier &apos;{0}&apos;..
        /// </summary>
        public static string WindowHotKeyDuplicateId {
            get {
                return ResourceManager.GetString("WindowHotKeyDuplicateId", resourceCulture);
            }
        }
    }
}
