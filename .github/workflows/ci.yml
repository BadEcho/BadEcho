# Reusable workflow that builds the repository's code, executes tests, and then deploys the packages to NuGet when a push is made to the default branch.

name: CI
 
on:
  push:
    branches:  
      - master
    paths-ignore:
      - '.github/workflows/**'
      - '!.github/workflows/ci.yml'
  pull_request:
    branches:
      - master
  workflow_call:
    inputs:
      build-script-args:
        required: true
        type: string
      skip-tests:
        required: false
        type: boolean
        default: false
jobs:
  build:
    name: Fetch and Build Source
    runs-on: windows-2022
    steps:    
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2    
      # GitHub artifacts expire after 90 days, so this will fail every 90 days.
      # We cache vcpkg build artifacts, as their compilation requires an inordinate amount of time.
    - name: Download vcpkg Artifacts
      id: download-vcpkg
      uses: dawidd6/action-download-artifact@v3
      continue-on-error: true
      with:
        workflow: ci.yml
        name: vcpkg-binaries
        commit: ${{ vars.VCPKG_BINARIES_SHA }}
        path: src/MsdfGenerator/vcpkg_installed/
      # If we don't generate the following *.stamp file, C++ dependencies will be recompiled regardless of existing artifacts.
    - name: Update vcpkg Output Timestamp
      if: steps.download-vcpkg.outcome == 'success'
      run: touch src/MsdfGenerator/vcpkg_installed/x64-windows-static-md/.msbuildstamp-x64-windows-static-md.stamp
    - name: Build
      shell: pwsh      
      run: $scriptArgs = $ExecutionContext.InvokeCommand.ExpandString($Env:BUILD_SCRIPT_ARGS) | ConvertFrom-StringData; .\build\Invoke-Build.ps1 @scriptArgs
      env:
        BUILD_SCRIPT_ARGS: ${{ inputs.build-script-args != '' && inputs.build-script-args || 'CommitId = $(git rev-parse --short HEAD) `nVersionDistance = $(git rev-list --count "$(git log -1 --pretty=format:"%H" version.json)..HEAD") `nPackageConfiguration = Package' }}
      # If vcpkg artifact aquisition failed earlier, we upload our freshly compiled dependencies and record the commit hash for future retrieval.
    - name: Upload vcpkg Artifacts
      if: steps.download-vcpkg.outcome == 'failure'
      uses: actions/upload-artifact@v4
      with:
        name: vcpkg-binaries
        path: src/MsdfGenerator/vcpkg_installed/**/*      
    - name: Record vcpkg Artifact Commit Hash
      if: steps.download-vcpkg.outcome == 'failure'
      run: gh variable set VCPKG_BINARIES_SHA -b $(git rev-parse HEAD)
      shell: pwsh
      env:
        GH_TOKEN: ${{ secrets.REPO_TOKEN }}
      # Store our compiled assets for subsequent jobs.
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: bin/rel/
    - name: Upload Game Test Content Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: game-test-content
        path: tests/Game.Tests/Content/
    - name: Upload Package Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: packages
        path: artifacts/
  test:
    name: Run Unit Tests
    needs: build
    if: inputs.skip-tests != true
    runs-on: windows-2022
    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Add VSTest to PATH
      uses: darenm/Setup-VSTest@v1.3
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: binaries
        path: bin/rel/
    - name: Download Game Test Content Artifacts
      uses: actions/download-artifact@v4
      with:
        name: game-test-content
        path: tests/Game.Tests/Content/
    - name: Execute Test Runner
      shell: pwsh
      run: vstest.console /Logger:trx /ResultsDirectory:testResults (Get-ChildItem bin\rel\*.Tests.dll).FullName
    - name: Upload Test Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: testResults/
  deploy:
    name: Deploy Packages
    needs: [build, test]
    runs-on: windows-2022
    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Download Package Artifacts
      uses: actions/download-artifact@v4
      with:
        name: packages
        path: artifacts/
    # - name: Push to NuGet
    #   shell: pwsh
    #   run: |
    #     Get-ChildItem .\artifacts -Filter "*.nupkg" | ForEach-Object {
    #       Write-Host "$($scriptName): Pushing $($_.Name) to repository."
    #       dotnet nuget push $_.FullName --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}
    #       if ($lastexitcode -ne 0) {
    #         throw ("Push command errored with exit code: " + $lastexitcode)
    #       }
    #     }